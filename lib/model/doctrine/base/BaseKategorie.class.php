<?php

/**
 * BaseKategorie
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $title
 * @property integer $parent_id
 * @property clob $popis
 * @property integer $poradi
 * @property boolean $enabled
 * @property enum $pozice
 * @property enum $typ
 * @property string $keywords
 * @property string $description
 * @property Kategorie $KategorieParent
 * @property Doctrine_Collection $Stranky
 * @property Doctrine_Collection $Kategorie
 * @property Doctrine_Collection $Akce
 * @property Doctrine_Collection $Zbozi
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getTitle()           Returns the current record's "title" value
 * @method integer             getParentId()        Returns the current record's "parent_id" value
 * @method clob                getPopis()           Returns the current record's "popis" value
 * @method integer             getPoradi()          Returns the current record's "poradi" value
 * @method boolean             getEnabled()         Returns the current record's "enabled" value
 * @method enum                getPozice()          Returns the current record's "pozice" value
 * @method enum                getTyp()             Returns the current record's "typ" value
 * @method string              getKeywords()        Returns the current record's "keywords" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method Kategorie           getKategorieParent() Returns the current record's "KategorieParent" value
 * @method Doctrine_Collection getStranky()         Returns the current record's "Stranky" collection
 * @method Doctrine_Collection getKategorie()       Returns the current record's "Kategorie" collection
 * @method Doctrine_Collection getAkce()            Returns the current record's "Akce" collection
 * @method Doctrine_Collection getZbozi()           Returns the current record's "Zbozi" collection
 * @method Kategorie           setId()              Sets the current record's "id" value
 * @method Kategorie           setName()            Sets the current record's "name" value
 * @method Kategorie           setTitle()           Sets the current record's "title" value
 * @method Kategorie           setParentId()        Sets the current record's "parent_id" value
 * @method Kategorie           setPopis()           Sets the current record's "popis" value
 * @method Kategorie           setPoradi()          Sets the current record's "poradi" value
 * @method Kategorie           setEnabled()         Sets the current record's "enabled" value
 * @method Kategorie           setPozice()          Sets the current record's "pozice" value
 * @method Kategorie           setTyp()             Sets the current record's "typ" value
 * @method Kategorie           setKeywords()        Sets the current record's "keywords" value
 * @method Kategorie           setDescription()     Sets the current record's "description" value
 * @method Kategorie           setKategorieParent() Sets the current record's "KategorieParent" value
 * @method Kategorie           setStranky()         Sets the current record's "Stranky" collection
 * @method Kategorie           setKategorie()       Sets the current record's "Kategorie" collection
 * @method Kategorie           setAkce()            Sets the current record's "Akce" collection
 * @method Kategorie           setZbozi()           Sets the current record's "Zbozi" collection
 * 
 * @package    E Shop
 * @subpackage model
 * @author     Jan Damek, damekjan74@gmail.com
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseKategorie extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('kategorie');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 50,
             ));
        $this->hasColumn('title', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('parent_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('popis', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('poradi', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('enabled', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('pozice', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Levý sloupec',
              1 => 'Horní pruh',
              2 => 'Dolní pruh',
             ),
             ));
        $this->hasColumn('typ', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Zboží',
              1 => 'Stránky',
              2 => 'Akce',
             ),
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Kategorie as KategorieParent', array(
             'local' => 'parent_id',
             'foreign' => 'id'));

        $this->hasMany('Stranky', array(
             'local' => 'id',
             'foreign' => 'kategorie_id'));

        $this->hasMany('Kategorie', array(
             'local' => 'id',
             'foreign' => 'parent_id'));

        $this->hasMany('Akce', array(
             'local' => 'id',
             'foreign' => 'kategorie_id'));

        $this->hasMany('Zbozi', array(
             'local' => 'id',
             'foreign' => 'kategorie_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'name',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}